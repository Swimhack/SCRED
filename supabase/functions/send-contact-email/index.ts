import { serve } from "https://deno.land/std@0.168.0/http/server.ts"
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2.49.4'

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
}

interface ContactFormData {
  name: string;
  email: string;
  phone?: string;
  message: string;
  source?: string;
  userAgent?: string;
  ipAddress?: string;
  referrer?: string;
}

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response('ok', { headers: corsHeaders })
  }

  try {
    const supabase = createClient(
      Deno.env.get('SUPABASE_URL') ?? '',
      Deno.env.get('SUPABASE_SERVICE_ROLE_KEY') ?? ''
    )

    // Extract IP address from request headers
    const clientIP = req.headers.get('x-forwarded-for') || 
                     req.headers.get('x-real-ip') || 
                     req.headers.get('cf-connecting-ip') || 
                     'unknown'

    const { name, email, phone, message, source = 'website', userAgent, ipAddress, referrer }: ContactFormData = await req.json()
    
    // Use client IP from headers if not provided in request body
    const finalIpAddress = ipAddress || clientIP

    // Validate required fields
    if (!name || !email || !message) {
      return new Response(
        JSON.stringify({ error: 'Missing required fields' }),
        { 
          status: 400, 
          headers: { ...corsHeaders, 'Content-Type': 'application/json' } 
        }
      )
    }

    // Store submission in database
    const { data: submission, error: dbError } = await supabase
      .from('contact_submissions')
      .insert({
        name,
        email,
        phone,
        message,
        source,
        user_agent: userAgent,
        ip_address: finalIpAddress,
        referrer,
        status: 'new'
      })
      .select()
      .single()

    if (dbError) {
      console.error('Database error:', dbError)
      return new Response(
        JSON.stringify({ error: 'Failed to save submission' }),
        { 
          status: 500, 
          headers: { ...corsHeaders, 'Content-Type': 'application/json' } 
        }
      )
    }

    // Send email via Gmail SMTP
    try {
      const gmailUser = Deno.env.get('GMAIL_USER')
      const gmailPassword = Deno.env.get('GMAIL_APP_PASSWORD')
      const recipientEmail = Deno.env.get('CONTACT_RECIPIENT_EMAIL') || 'james@ekaty.com'

      if (!gmailUser || !gmailPassword) {
        console.error('Gmail credentials not configured')
        // Update submission to mark email error but don't fail the request
        await supabase
          .from('contact_submissions')
          .update({ 
            email_error: 'Gmail credentials not configured',
            email_sent: false
          })
          .eq('id', submission.id)

        return new Response(
          JSON.stringify({ 
            success: true, 
            message: 'Contact form submitted successfully', 
            id: submission.id,
            emailWarning: 'Email notification could not be sent'
          }),
          { 
            status: 200, 
            headers: { ...corsHeaders, 'Content-Type': 'application/json' } 
          }
        )
      }

      // Prepare email content
      const emailSubject = `🔔 New Contact Form Submission from ${name}`
      const emailBody = `
🆕 NEW CONTACT FORM SUBMISSION RECEIVED
═══════════════════════════════════════════

📋 CONTACT INFORMATION:
━━━━━━━━━━━━━━━━━━━━━━━━━
👤 Name: ${name}
📧 Email: ${email}
📱 Phone: ${phone || 'Not provided'}
🌐 Source: ${source}

💬 MESSAGE:
━━━━━━━━━━━━━━━━━━━━━━━━━
${message}

🔍 SUBMISSION DETAILS:
━━━━━━━━━━━━━━━━━━━━━━━━━
🆔 Submission ID: ${submission.id}
🕒 Submitted at: ${new Date(submission.created_at).toLocaleString()}
🌍 IP Address: ${finalIpAddress || 'Not provided'}
🔗 Referrer: ${referrer || 'Not provided'}
💻 User Agent: ${userAgent || 'Not provided'}

═══════════════════════════════════════════

📊 You can view and manage this submission in the admin dashboard:
🔗 Admin Panel: /contact-submissions

⚡ This email was automatically generated by StreetCredRx contact form system.
      `.trim()

      // Send email using Gmail SMTP
      const emailData = {
        to: recipientEmail,
        subject: emailSubject,
        body: emailBody,
        from: gmailUser
      }

      // Call the existing send-email function
      const emailResponse = await fetch(`${Deno.env.get('SUPABASE_URL')}/functions/v1/send-email`, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${Deno.env.get('SUPABASE_ANON_KEY')}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(emailData)
      })

      if (emailResponse.ok) {
        // Update submission to mark email sent
        await supabase
          .from('contact_submissions')
          .update({ 
            email_sent: true,
            email_sent_at: new Date().toISOString()
          })
          .eq('id', submission.id)
      } else {
        const emailError = await emailResponse.text()
        console.error('Email sending failed:', emailError)
        
        // Update submission to mark email error
        await supabase
          .from('contact_submissions')
          .update({ 
            email_error: `Email sending failed: ${emailError}`,
            email_sent: false
          })
          .eq('id', submission.id)
      }

    } catch (emailError) {
      console.error('Email error:', emailError)
      
      // Update submission to mark email error
      await supabase
        .from('contact_submissions')
        .update({ 
          email_error: String(emailError),
          email_sent: false
        })
        .eq('id', submission.id)
    }

    // Log the contact form submission
    await supabase
      .from('app_logs')
      .insert({
        level: 'info',
        message: 'Contact form submission received',
        context: JSON.stringify({
          action: 'contact_form_submission',
          submission_id: submission.id,
          email: email,
          source: source
        }),
        route: '/api/contact',
        user_agent: userAgent,
        ip_address: finalIpAddress
      })

    return new Response(
      JSON.stringify({ 
        success: true, 
        message: 'Contact form submitted successfully', 
        id: submission.id
      }),
      { 
        status: 200, 
        headers: { ...corsHeaders, 'Content-Type': 'application/json' } 
      }
    )

  } catch (error) {
    console.error('Function error:', error)
    return new Response(
      JSON.stringify({ error: 'Internal server error' }),
      { 
        status: 500, 
        headers: { ...corsHeaders, 'Content-Type': 'application/json' } 
      }
    )
  }
})